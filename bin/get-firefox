#! /usr/bin/env node

var index = require("../");
var program = require("commander");
var path = require('path');
var pkg = require( path.join(__dirname, "../", 'package.json') );
var colors = require("colors");

program
    .version(pkg.version)
    .option("-p --platform <platform>", "platform of the Firefox version", /^(win|mac|linux|android|linux-add-on-devel)$/i, 'linux')
    .option("-a --architecture [arch]", "platform architecture", /^(x86(_64)?|multi|arm-v15)$/)
    .option("-t --target [target]", "target filename, defaults to the remote filename")
    .option("-c --check", "check the checksum for the download")
    .option("-e --extract", "extract archive after download")
    .option("-l --list", "list all platforms and architectures")
    .parse(process.argv);

if(program.list) {
    var platforms = require("../lib/platforms.json");
    for(var p in platforms) {
        for(var a in platforms[p].arches) {
            process.stdout.write(p + " " + a + (a == platforms[p].defaultArch ? " (default architecture)".grey:"") + "\n");
        }
    }
}
else {
    process.stdout.write("Searching latest Firefox nightly...\n");
    var progress;

    var container = index.getContainer(program.platform, program.arch);

    var promise = Promise.resolve(program.target);
    if(!program.target) {
        promise = container.getFileName();
    }
    return Promise.all([
        promise,
        container.getFileURL()
    ]).then((urls) => {
        process.stdout.write("Downloading from "+ urls[1].blue + " and saving as " + urls[0].blue + "\n");
        return index.downloadFirefox(container, urls[0]).then(() => {
            if(program.check) {
                return index.check(container, urls[0]).then(function(msg) {
                    process.stdout.write(msg+"\n");
                });
            }
        }).then(() => {
            if(program.extract) {
                process.stdout.write("Extracting the archive...\n");
                return index.extract(urls[0]);
            }
        });
    })
    .catch((error) => {
        process.stderr.write("Error downloading Firefox: "+error.toString().red+"\n");
    });
}
